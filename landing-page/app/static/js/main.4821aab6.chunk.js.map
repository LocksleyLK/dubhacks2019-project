{"version":3,"sources":["firebaseConfig.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseAppAuth","firebase","firebaseConfig","auth","providers","googleProvider","GoogleAuthProvider","App","Layout","Header","Content","Footer","this","props","user","signOut","signInWithGoogle","console","log","className","src","logo","alt","displayName","onClick","React","Component","withFirebaseAuth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"mQASeA,G,MATA,CACbC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CCMHC,EAFcC,gBAAuBC,GAEPC,OAC9BC,EAAY,CAChBC,eAAgB,IAAIJ,OAAcK,oBAK9BC,GAF8BC,IAA5BC,OAA4BD,IAApBE,QAAoBF,IAAXG,O,iLAGb,IAAD,EACqCC,KAAKC,MAAzCC,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,iBAQvB,OANAC,QAAQC,IAAIJ,GA+BV,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACxCR,EAAO,qCAAWA,EAAKS,aAAmB,8CAC1CT,EACC,kBAAC,IAAD,CAAQU,QAAST,GAAjB,YAEA,kBAAC,IAAD,CAAQS,QAASR,GAAjB,6B,GA1CMS,IAAMC,YAkDTC,cAAiB,CAC9BvB,YACAJ,mBAFa2B,CAGZpB,GC7DiBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.4821aab6.chunk.js","sourcesContent":["const config = {\r\n  apiKey: \"AIzaSyBwU-wZyXcA8C4Ar8joWkaCVOX2_8dfr-Y\",\r\n  authDomain: \"dubhacks2019-project.firebaseapp.com\",\r\n  databaseURL: \"https://dubhacks2019-project.firebaseio.com\",\r\n  projectId: \"dubhacks2019-project\",\r\n  storageBucket: \"dubhacks2019-project.appspot.com\",\r\n  messagingSenderId: \"271011831856\",\r\n  appId: \"1:271011831856:web:5e6917e244a6f15e5ccdf5\"\r\n};\r\nexport default config;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport { Button, Breadcrumb, Layout, Menu } from \"antd\";\r\n\r\nimport withFirebaseAuth from \"react-with-firebase-auth\";\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport firebaseConfig from \"./firebaseConfig\";\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst firebaseAppAuth = firebaseApp.auth();\r\nconst providers = {\r\n  googleProvider: new firebase.auth.GoogleAuthProvider()\r\n};\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const { user, signOut, signInWithGoogle } = this.props;\r\n\r\n    console.log(user);\r\n\r\n    // if (!user) {\r\n    //   signInWithGoogle();\r\n    // }\r\n\r\n    return (\r\n      // <Layout>\r\n      //   <Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}>\r\n      //     <div className=\"logo\" />\r\n      //     <Menu\r\n      //       theme=\"dark\"\r\n      //       mode=\"horizontal\"\r\n      //       // defaultSelectedKeys={[\"2\"]}\r\n      //       style={{ lineHeight: \"64px\" }}\r\n      //     >\r\n      //       <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n      //       <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n      //       <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n      //     </Menu>\r\n      //   </Header>\r\n      //   <Content style={{ padding: \"0 50px\", marginTop: 64 }}>\r\n      //     <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n      //       <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n      //       <Breadcrumb.Item>List</Breadcrumb.Item>\r\n      //       <Breadcrumb.Item>App</Breadcrumb.Item>\r\n      //     </Breadcrumb>\r\n      //     <div style={{ background: \"#fff\", padding: 24, minHeight: 380 }}>Content</div>\r\n      //   </Content>\r\n      //   <Footer style={{ textAlign: \"center\" }}>Ant Design Â©2018 Created by Ant UED</Footer>\r\n      // </Layout>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          {user ? <p>Hello, {user.displayName}</p> : <p>Please sign in.</p>}\r\n          {user ? (\r\n            <Button onClick={signOut}>Sign out</Button>\r\n          ) : (\r\n            <Button onClick={signInWithGoogle}>Sign in with Google</Button>\r\n          )}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withFirebaseAuth({\r\n  providers,\r\n  firebaseAppAuth\r\n})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}