{"version":3,"sources":["transparantColoredLogo.png","Gallery.js","firebaseConfig.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gallery","grid","gutter","column","dataSource","this","props","data","renderItem","place","Item","cover","src","path","alt","style","width","Meta","title","Component","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseAppAuth","firebase","firebaseConfig","auth","providers","googleProvider","GoogleAuthProvider","Header","Layout","Content","Footer","places","App","user","signOut","signInWithGoogle","console","log","className","position","zIndex","textAlign","color","marginRight","displayName","onClick","padding","marginTop","logo","background","minHeight","React","withFirebaseAuth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,oD,8QC4B5BC,E,iLAvBX,OACE,kBAAC,IAAD,CACEC,KAAM,CAAEC,OAAQ,GAAIC,OAAQ,GAC5BC,WAAYC,KAAKC,MAAMC,KACvBC,WAAY,SAAAC,GAAK,OACf,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CACEC,MAEE,yBAAKC,IAAKH,EAAMI,KAAMC,IAAI,MAAMC,MAAO,CAAEC,MAAO,WAKlD,kBAAC,IAAKC,KAAN,CAAWC,MAAOT,EAAMS,OAAS,gB,GAhBzBC,a,iBCMPC,G,OATA,CACbC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CCQHC,EAFcC,gBAAuBC,GAEPC,OAC9BC,EAAY,CAChBC,eAAgB,IAAIJ,OAAcK,oBAG5BC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAErBC,EAAS,CACX,CAAErB,MAAO,mBAAoBL,KAAM,wBACnC,CAAEK,MAAO,oBAAqBL,KAAM,yBACpC,CAAEA,KAAM,sBACR,CAAEA,KAAM,mCACR,CAAEA,KAAM,4BACR,CAAEA,KAAM,0BACR,CAAEA,KAAM,sCACR,CAAEA,KAAM,6BAGJ2B,E,iLACM,IAAD,EACqCnC,KAAKC,MAAzCmC,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,iBAQvB,OANAC,QAAQC,IAAIJ,GAOV,yBAAKK,UAAU,OACb,kBAAC,IAAD,KACE,kBAACX,EAAD,CAAQpB,MAAO,CAAEgC,SAAU,QAASC,OAAQ,EAAGhC,MAAO,OAAQiC,UAAW,UAYvE,0BAAMlC,MAAO,CAAEmC,MAAO,UAAWC,YAAa,KAC3CV,EAAI,iBAAaA,EAAKW,aAAlB,mBAENX,EAEC,kBAAC,IAAD,CAAQY,QAASX,GAAjB,YAGA,kBAAC,IAAD,CAAQW,QAASV,GAAjB,wBAGJ,kBAACN,EAAD,CAAStB,MAAO,CAAEuC,QAAS,SAAUC,UAAW,KAE9C,yBAAK3C,IAAK4C,IAAMV,UAAU,WAAWhC,IAAI,SAEzC,yBAAKC,MAAO,CAAE0C,WAAY,OAAQH,QAAS,GAAII,UAAW,MACvDjB,EAAO,kBAAC,EAAD,CAASlC,KAAMgC,IAAa,qDAGxC,kBAACD,EAAD,CAAQvB,MAAO,CAAEkC,UAAW,WAA5B,kC,GA5CQU,IAAMxC,WAmDTyC,cAAiB,CAC9B5B,YACAJ,mBAFagC,CAGZpB,GC3EiBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.401da38b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/transparantColoredLogo.7354aa40.png\";","import React, { Component } from \"react\";\r\nimport { List, Card } from \"antd\";\r\n\r\nclass Gallery extends Component {\r\n  render() {\r\n    return (\r\n      <List\r\n        grid={{ gutter: 16, column: 4 }}\r\n        dataSource={this.props.data}\r\n        renderItem={place => (\r\n          <List.Item>\r\n            <Card\r\n              cover={\r\n                // <a href={place.path} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img src={place.path} alt=\"alt\" style={{ width: \"100%\" }} />\r\n                // </a>\r\n              }\r\n              // size=\"small\"\r\n            >\r\n              <Card.Meta title={place.title || null} />\r\n            </Card>\r\n          </List.Item>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;\r\n","const config = {\r\n  apiKey: \"AIzaSyBwU-wZyXcA8C4Ar8joWkaCVOX2_8dfr-Y\",\r\n  authDomain: \"dubhacks2019-project.firebaseapp.com\",\r\n  databaseURL: \"https://dubhacks2019-project.firebaseio.com\",\r\n  projectId: \"dubhacks2019-project\",\r\n  storageBucket: \"dubhacks2019-project.appspot.com\",\r\n  messagingSenderId: \"271011831856\",\r\n  appId: \"1:271011831856:web:5e6917e244a6f15e5ccdf5\"\r\n};\r\nexport default config;\r\n","import React from \"react\";\r\nimport logo from \"./transparantColoredLogo.png\";\r\nimport \"./App.css\";\r\n\r\nimport { Button, Breadcrumb, Layout, Menu } from \"antd\";\r\n\r\nimport Gallery from \"./Gallery\";\r\n\r\nimport withFirebaseAuth from \"react-with-firebase-auth\";\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport firebaseConfig from \"./firebaseConfig\";\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst firebaseAppAuth = firebaseApp.auth();\r\nconst providers = {\r\n  googleProvider: new firebase.auth.GoogleAuthProvider()\r\n};\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nlet places = [\r\n  { title: \"House in Ballard\", path: \"./images/Ballard.jpg\" },\r\n  { title: \"House in Magnolia\", path: \"./images/Magnolia.jpg\" },\r\n  { path: \"./images/North.jpg\" },\r\n  { path: \"./images/OurBishopLakeUnion.jpg\" },\r\n  { path: \"./images/OurLadyEast.jpg\" },\r\n  { path: \"./images/Southwest.jpg\" },\r\n  { path: \"./images/StGeorgeRainierValley.jpg\" },\r\n  { path: \"./images/Wallingford.png\" }\r\n];\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const { user, signOut, signInWithGoogle } = this.props;\r\n\r\n    console.log(user);\r\n\r\n    // if (!user) {\r\n    //   signInWithGoogle();\r\n    // }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          <Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\", textAlign: \"right\" }}>\r\n            {/* <div className=\"logo\" /> */}\r\n            {/* <Menu\r\n            theme=\"dark\"\r\n            mode=\"horizontal\"\r\n            // defaultSelectedKeys={[\"2\"]}\r\n            style={{ lineHeight: \"64px\" }}\r\n          >\r\n            <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n            <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n            <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n          </Menu> */}\r\n            <span style={{ color: \"#ffffff\", marginRight: 12 }}>\r\n              {user ? `Hello, ${user.displayName}` : `Please sign in.`}\r\n            </span>\r\n            {user ? (\r\n              // <div>\r\n              <Button onClick={signOut}>Sign out</Button>\r\n            ) : (\r\n              // </div>\r\n              <Button onClick={signInWithGoogle}>Sign in with Google</Button>\r\n            )}\r\n          </Header>\r\n          <Content style={{ padding: \"0 50px\", marginTop: 64 }}>\r\n            {/* <header className=\"App-header\"> */}\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            {/* </header> */}\r\n            <div style={{ background: \"#fff\", padding: 24, minHeight: 380 }}>\r\n              {user ? <Gallery data={places} /> : <strong>Please sign in.</strong>}\r\n            </div>\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\" }}>Created at Dubhacks 2019</Footer>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withFirebaseAuth({\r\n  providers,\r\n  firebaseAppAuth\r\n})(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}